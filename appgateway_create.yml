# Description
# ===========
# This playbook creates an Application Gateway, the azure_rm_appgw module is not available in v2.4 & 2.5, but in azure_preview_modules role,
# so you need to run "ansible-galaxy install Azure.azure_preview_modules" to install the role to get lastest Ansible modules.
# 1. create resource group
# 1. create virtual network
# 1. create subnet
# 1. create application gateway

---
- hosts: localhost
  vars:
    resource_group: zimsappgwrgXXX
    location: eastus
  tasks:
    - name: Prepare random number
      set_fact:
        rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
      run_once: yes

    - name: Create a resource group
      azure_rm_resourcegroup:
        name: "{{ resource_group }}"
        location: "{{ location }}"

    - name: Create a container with httpd image 
      azure_rm_containerinstance:
        resource_group: "{{ resource_group }}"
        name: "aci{{ resource_group | hash('md5') | truncate(7, True, '') }}"
        os_type: linux
        ip_address: public
        location: eastus
        ports:
          - 80
        containers:
          - name: mycontainer1
            image: httpd
            memory: 1.5
            ports:
              - 80
      register: ci_output_a

    - name: Create another container with httpd image 
      azure_rm_containerinstance:
        resource_group: "{{ resource_group }}"
        name: "aci{{ resource_group | hash('md5') | truncate(7, True, '') }}b"
        os_type: linux
        ip_address: public
        location: eastus
        ports:
          - 80
        containers:
          - name: mycontainer1
            image: httpd
            memory: 1.5
            ports:
              - 80
      register: ci_output_b

    - name: Dump first container instance output
      debug:
        var: ci_output_a

    - name: Dump second container instance output
      debug:
        var: ci_output_b

    - name: Create a virtual network
      azure_rm_virtualnetwork:
        name: vnet{{ rpfx }}
        resource_group: "{{ resource_group }}"
        address_prefixes_cidr:
            - 10.1.0.0/16
            - 172.100.0.0/16
        dns_servers:
            - 127.0.0.1
            - 127.0.0.2

    - name: Create a subnet
      azure_rm_subnet:
        name: subnet{{ rpfx }}
        virtual_network_name: vnet{{ rpfx }}
        resource_group: "{{ resource_group }}"
        address_prefix_cidr: 10.1.0.0/24
      register: subnet_output


    - name: Create instance of Application Gateway
      azure_rm_appgateway:
        resource_group: "{{ resource_group }}"
        name: "appgateway{{ rpfx }}"
        sku:
          name: standard_small
          tier: standard
          capacity: 2
        ssl_policy:
          policy_type: predefined
          policy_name: ssl_policy20150501
          disabled_ssl_protocols:
            - tls_v1_0
          cipher_suites:
            - tls_ecdhe_ecdsa_with_aes_256_gcm_sha384
        authentication_certificates:
          - name: cert1
            data: "{{ lookup('file', 'cert1.txt') }}"
        ssl_certificates:
          - name: cert2
            password: your-password
            data: "{{ lookup('file', 'cert2.txt') }}"
        gateway_ip_configurations:
          - subnet:
              id: "{{ subnet_output.state.id }}"
            name: app_gateway_ip_config
        frontend_ip_configurations:
          - subnet:
              id: "{{ subnet_output.state.id }}"
            name: sample_gateway_frontend_ip_config
        frontend_ports:
          - port: 90
            name: ag_frontend_port
        backend_address_pools:
          - backend_addresses:
              - ip_address: 10.0.0.4
            name: test_backend_address_pool
        backend_http_settings_collection:
          - port: 80
            protocol: http
            cookie_based_affinity: enabled
            name: sample_appgateway_http_settings
        http_listeners:
          - frontend_ip_configuration: sample_gateway_frontend_ip_config
            frontend_port: ag_frontend_port
            name: sample_http_listener
        request_routing_rules:
          - rule_type: Basic
            backend_address_pool: test_backend_address_pool
            backend_http_settings: sample_appgateway_http_settings
            http_listener: sample_http_listener
            name: rule1
      register: output

    - name: Assert the resource instance is well created
      assert:
        that:
          - output.changed

